# Uncomment below to enable profiling
# zmodload zsh/zprof

# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

# Sane default
unsetopt correct_all
setopt no_beep
setopt auto_cd
export HISTFILE=~/.zsh_history
export HISTSIZE=1000000
export SAVEHIST=1000000
setopt append_history
setopt extended_history
setopt hist_expire_dups_first
setopt hist_ignore_dups # ignore duplication command history list
setopt hist_ignore_space
setopt hist_ignore_all_dups
setopt hist_find_no_dups
setopt hist_save_no_dups
setopt hist_verify
setopt share_history
setopt inc_append_history
setopt no_auto_remove_slash
setopt interactivecomments
unsetopt menu_complete   # do not autoselect the first completion entry
unsetopt flowcontrol
setopt auto_menu         # show completion menu on succesive tab press
setopt complete_in_word
setopt always_to_end
export WORDCHARS='*?_-.[]~=&;!#$%^(){}<>'
# disable ctrl-s
if [[ -t 0 && $- = *i* ]]
then
    stty -ixon
fi

### Added by Zinit's installer
if [[ ! -f $HOME/.zinit/bin/zinit.zsh ]]; then
    print -P "%F{33}▓▒░ %F{220}Installing %F{33}DHARMA%F{220} Initiative Plugin Manager (%F{33}zdharma/zinit%F{220})…%f"
    command mkdir -p "$HOME/.zinit" && command chmod g-rwX "$HOME/.zinit"
    command git clone https://github.com/zdharma/zinit "$HOME/.zinit/bin" && \
        print -P "%F{33}▓▒░ %F{34}Installation successful.%f%b" || \
        print -P "%F{160}▓▒░ The clone has failed.%f%b"
fi

source "$HOME/.zinit/bin/zinit.zsh"
autoload -Uz _zinit
(( ${+_comps} )) && _comps[zinit]=_zinit

# Load a few important annexes, without Turbo
# (this is currently required for annexes)
zinit light-mode for \
    zinit-zsh/z-a-rust \
    zinit-zsh/z-a-as-monitor \
    zinit-zsh/z-a-patch-dl \
    zinit-zsh/z-a-bin-gem-node

### End of Zinit's installer chunk

# Package settings
# Packages
zinit light "zsh-users/zsh-autosuggestions"
zinit light "zdharma/fast-syntax-highlighting"
zinit light "zsh-users/zsh-completions"
zinit light "b4b4r07/emoji-cli"
zinit ice depth=1; zinit light romkatv/powerlevel10k
fpath+=~/.zfunc

# Completions
autoload -Uz compinit
for dump in ~/.zcompdump(N.mh+24); do
  compinit
done
compinit -C
zstyle ':completion:*' matcher-list '' 'm:{[:lower:]}={[:upper:]}' '+m:{[:upper:]}={[:lower:]}'

# Theming
[ -f "${HOME}/.nord.dircolors" ] && eval $(gdircolors -b ${HOME}/.nord.dircolors)
[ -n "$LS_COLORS" ] && zstyle ':completion:*:default' list-colors ${(s.:.)LS_COLORS}

# Aliases
alias ls='ls -h --color=auto'
alias ll='ls -lh'
alias la='ls -alh'
export EDITOR="vim"
export VISUAL="vim"
alias gibo='docker run --rm simonwhitaker/gibo'

# Keys, Completions
bindkey -e
bindkey "\e[Z" reverse-menu-complete
bindkey -a 'q' push-line
bindkey -a 'H' run-help
bindkey "^F" forward-char
bindkey "^B" backward-char
autoload history-search-end
zle -N history-beginning-search-backward-end history-search-end
zle -N history-beginning-search-forward-end history-search-end
bindkey "^P" history-beginning-search-backward-end
bindkey "^N" history-beginning-search-forward-end

# Enable Ctrl-x-e to edit command line
autoload -U edit-command-line
zle -N edit-command-line
bindkey '^xe' edit-command-line
bindkey '^x^e' edit-command-line

# Functions, and utils on start-up
less_with_unbuffer () {
    unbuffer "$@" |& less -SR
}
alias ul=less_with_unbuffer

# macOS like open command
open () {
    xdg-open "$*" &
}

use-google-cloud-sdk () {
    export CLOUDSDK_PYTHON=python3
    _google_cloud_sdk_dir="${HOME}/google-cloud-sdk/"
    [ -f "${_google_cloud_sdk_dir}path.zsh.inc" ] && source "${_google_cloud_sdk_dir}path.zsh.inc"
    [ -f "${_google_cloud_sdk_dir}completion.zsh.inc" ] && source "${_google_cloud_sdk_dir}completion.zsh.inc"
}

activate () {
    [[ -f "./.venv/bin/activate" ]] && { source ./.venv/bin/activate ; return 0 } \
        || [[ -f "./venv/bin/activate" ]] && { source ./venv/bin/activate ; return 0 } \
        || SRC=$(echo $(dirname $(poetry run which python 2>/dev/null ) 2>/dev/null )/activate ); \
           [[ -f ${SRC} ]] && { poetry shell ; return 0 } \
        || SRC=$(echo $(dirname $(pipenv --py 2>/dev/null ) 2>/dev/null )/activate ); \
           [[ -f ${SRC} ]] && { pipenv shell ; return 0 } \
        || { echo "No virtualenv found in $(pwd)" ; return 1 }
}

# Fix for https://github.com/sdispater/poetry/issues/571 (poetry <= 0.12.*)
poetry_shell () {
    SRC=$(echo $(dirname $(poetry run which python 2>/dev/null ) 2>/dev/null )/activate )
    [[ -f ${SRC} ]] && source ${SRC} || echo "Failed to source ${SRC}"
}


count-loc () {
    find . -name "*.${1}" | xargs -L1 wc -l | tr -s " " | cut -d " " -f 2 | paste -sd+ - | bc
}

# ---------------------------------------------------------------------
export PATH="${PATH}:/mnt/c/Program Files/Docker/Docker/resources/bin:/mnt/c/ProgramData/DockerDesktop/version-bin"
[[ -d "$HOME/.local" ]] && export PATH="$HOME/.local/bin:${PATH}"

# Run dockerd
sudo service docker status &>/dev/null || sudo service docker start &>/dev/null 

# Python
if [ -d "$HOME/.pyenv" ]; then
  export PATH="$HOME/.pyenv/bin:${PATH}"
  eval "$(pyenv init -)"
  eval "$(pyenv virtualenv-init -)"
fi
export PATH="${HOME}/.poetry/bin:${PATH}"
use-google-cloud-sdk
# use daemonize since WSL2 doesn't have systemd
daemonize $(which blackd) &>/dev/null

# Rust
[[ -d "$HOME/.cargo" ]] && source "$HOME/.cargo/env"

# Haskell
[[ -f "$HOME/ghcup/env" ]] && source "$HOME/.ghcup/env" # ghcup-env

# Golang
export GOPATH=$HOME/go

# *env tools
export DIRENV_WARN_TIMEOUT=100s
eval "$(direnv hook zsh)"

# X11
export DISPLAY=$(cat /etc/resolv.conf | grep nameserver | awk '{print $2}'):0

# fzf
[[ -f "${HOME}/.fzf.zsh" ]] && . ${HOME}/.fzf.zsh
export FZF_DEFAULT_OPTS="--color 16"

# Java sdkman
export SDKMAN_DIR="$HOME/.sdkman"
[[ -s "$SDKMAN_DIR/bin/sdkman-init.sh" ]] && source "$SDKMAN_DIR/bin/sdkman-init.sh"

# Volta
export VOLTA_HOME="$HOME/.volta"
export PATH="$VOLTA_HOME/bin:$PATH"

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh

# Uncomment below to enable profiling
# zprof